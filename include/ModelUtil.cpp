#include "ModelUtil.h"

#include <SPIFFS.h>

// -------------- Variables

unsigned int *_layers;
int _numberOfLayers;
byte *_actvFunctions;

#ifdef USE_64_BIT_DOUBLE
double iinitialBiases[] = 
#else
float iinitialBiases[] = 
#endif
{
    -0.042701967, 0.34170863, 0.44121084, 0.18469329, 0.07429001, 0.037393782, 0.08623015, -0.2889944, 0.20989978, 0.19008951, 0.0676257, 0.19457616, 0.14333266, 0.15957156, 0.13817158, 0.3233372, 
    0.05153432, 0.10334184, 0.31067836, -0.05276156, -0.10387087, 0.07216197, 0.12189184, -0.0029788306, 
    0.026805317, -0.2291436, -0.2723658, 0.10984491, 0.2862673, 0.012778176, 
};

#ifdef USE_64_BIT_DOUBLE
double iinitialWeights[] = 
#else
float iinitialWeights[] = 
#endif
{
    0.27685285, 0.022836886, -0.07139334, 0.51887596, -0.08704708, -0.314498, 0.56033665, 0.20840052, 0.14321531, 0.03805903, 0.08386487, -0.08339847, 0.1862553, 0.07190731, -0.10341537, -0.016672991, 0.8764801, 0.2926347, 0.55595815, -0.5350627, 
    0.03419656, -0.03747988, 0.079029255, -0.28491774, 0.06540959, 0.502066, 0.44947422, 0.50785404, -0.2322425, 0.06668622, -0.23391211, 0.61191386, 0.06255472, -0.31934276, 0.032125805, 0.4289824, -0.58481, -0.041951567, 0.0076552727, 0.8493507, 
    0.02355638, 0.004548826, 0.06760877, 0.63664037, 0.5508518, 0.3838163, 0.21993588, 0.021155648, -0.09194081, 0.38323042, 0.0039155725, 0.012965317, -0.5087108, 0.08603222, -0.5502165, 0.57569325, -0.15784138, -0.031150509, -0.18473417, 0.8442696, 
    -0.39345607, -0.010110871, 0.4799706, -0.55155724, 0.02262979, 0.115823604, -0.0038964958, -0.40753448, -0.58945686, -0.51109344, 0.07802486, -0.106737316, -0.098516, 0.64223254, 0.34421012, 0.057443902, 0.04615495, 0.06828493, 0.1700834, 0.21829203, 
    0.14325239, 0.032866195, 0.09353276, 0.00096502353, 0.54421246, -0.24193817, 0.10264061, -0.07884034, 0.04462244, 0.21301673, 0.30568382, 0.19412751, -0.42158782, -0.16059066, -0.5746547, -0.2684384, -0.4757141, -0.25278133, -0.0858088, 0.44284892, 
    0.3206472, -0.13426833, 0.0072115804, 0.105372526, -0.31575024, 0.030856613, -0.33156744, 0.2612024, -0.30594978, 0.5997254, 0.4580406, 0.077823766, -0.39817816, -0.47352764, -0.49632442, -0.24841313, 0.41533926, -0.24307124, -0.29868138, 0.28386143, 
    -0.20543848, 0.21846132, 0.10532339, -0.14297417, 0.3904943, -0.2527815, 0.16697007, -0.18202217, 0.20511165, 0.26138726, -0.21552995, 0.25638047, 0.36099875, -0.2416477, -0.21278702, -0.09905049, -0.15795726, -0.2283124, -0.15461424, 0.21078254, 
    -0.06544295, -0.104815565, 0.18161201, -0.22832392, -0.36417234, 0.35133308, -0.292268, -0.2083725, -0.23583151, 0.74328667, -0.0630578, -0.046377584, 0.18681163, -0.15582366, -0.1710765, -0.21769303, 0.58382887, 0.35433823, 0.24421878, -0.105834916, 
    0.13582394, -0.13746448, -0.0487027, -0.10163754, 0.48268977, -0.20168515, -0.4049257, 0.66639525, 0.4615223, -0.22571851, 0.035369642, 0.32225576, -0.25267452, 0.03217357, -0.16222456, -0.16559185, -0.5175722, 0.24406838, 0.09403307, 0.20857503, 
    -1.217836, -0.32324985, 0.23543455, 0.19925395, 0.027589688, -0.27401263, -0.20804606, -0.32234332, 0.046134412, -0.43304074, -0.34672585, -0.15836695, -0.19069499, 0.383935, 0.18193763, -0.23188107, 0.34570944, 0.18906792, -0.11845418, -0.29093817, 
    -0.2713193, -0.03953061, -0.1380806, 0.5933189, 0.29192555, 0.09365369, 0.39503065, -0.0995627, 0.64277923, 0.3917911, 0.3157209, 0.066703275, 0.13911484, 0.17896467, 0.36442968, 0.54629004, 0.7958083, -0.39435726, 0.022456218, -0.28446802, 
    1.0493103, -0.2782468, -0.25350454, -0.03802574, -0.32520792, -0.31899995, -0.34218216, 0.05541039, -0.290936, -0.396294, -0.016239585, -0.38093275, 0.021707673, -0.03402404, 0.33962122, 0.21420853, 0.17997749, -0.15237743, -0.010271305, -0.41076273, 
    0.10836888, -0.4038958, 0.051709834, 0.15430222, 0.47615877, 0.6726919, -0.026483899, 0.57962924, -0.055194516, 0.14612705, 0.40776443, -0.11500931, -0.30061135, 0.105200775, 0.37322044, 0.29308608, -0.35802868, -0.18383457, 0.13284086, -0.1499395, 
    0.24353778, 0.02742188, 0.3299941, 0.321251, 0.3791384, 0.23453796, 0.6522109, -0.41813523, -0.101462215, 0.7680093, 0.3563532, 0.19870159, -0.008156857, -0.3555834, 0.020047193, -0.111910716, 0.47526193, -0.11538227, 0.2452171, -0.5266511, 
    0.75767606, 0.35591096, -0.2509596, 0.10147813, -0.36072946, 0.30750564, -0.34018588, -0.37737194, 0.29559094, -0.09525515, -0.18488196, -0.16971256, 0.09113029, 0.46133915, 0.046415176, 0.056407664, -0.05344332, -0.36156198, 0.5179483, 0.02942147, 
    -0.35780054, -0.20832951, -0.31722572, -0.2776435, 0.089447424, 0.10906239, 0.19369619, -0.2749931, -0.6747525, -0.08316959, -0.5946773, -0.29564795, 0.16120024, 0.30115834, 0.1705822, -0.54862183, -0.20574142, -0.34193075, -0.47256425, -0.47422484, 

    -0.44359472, 0.13912804, 0.40146837, 0.12123769, 0.338881, -0.50380313, 0.023152364, -0.83549863, 0.24459787, -0.6475695, 0.25477174, 0.29292357, 0.6249515, -0.4198309, 0.36314556, -0.093940064, 
    0.19144146, 0.3482578, -0.53103256, 0.5173055, -0.18083717, -0.12571481, -0.51815623, 0.19686808, -0.038915724, -0.16057056, -0.46736568, 0.13295762, 0.4509216, -0.08357884, 0.08510125, 0.26602975, 
    -0.056528986, 0.18838848, 0.04584193, 0.78272474, -0.4404015, -0.37777016, -0.4955648, -0.7653022, 0.1264044, 0.8342075, 0.1632087, 0.34770176, 0.2217964, 0.19222257, 0.3967871, 0.9011968, 
    -0.667573, 0.26778805, 0.27237555, 0.38404948, 0.59934646, 0.42241853, 0.34732145, 0.00021314921, 0.2104257, 0.047937278, -0.1977535, -0.436172, -0.2852133, -0.19354622, 0.22072653, 0.11946254, 
    0.058558278, 0.3895028, 0.67625344, -0.11069777, -0.22733699, 0.19073384, -0.6439598, 0.67706984, -0.1604695, 0.362677, 0.17837434, -0.23702052, 0.5737566, 0.23361981, -0.5840659, 0.27640066, 
    -0.41227698, 0.48503518, 0.51279706, -0.41267765, 0.5753771, 0.2816817, 0.26739943, -0.37628293, 0.38995042, -0.17935912, -0.24978885, -0.048134007, 0.073139824, 0.2716807, -0.087427214, -0.5822893, 
    -0.24811505, 0.3196568, -0.044194084, -0.03774591, 0.545272, -0.49259537, 0.060757656, 0.012500263, 0.49051762, -0.38468716, -0.36876392, 0.11987569, 0.47965294, 0.37403905, -0.42632574, 0.16886745, 
    0.6053651, 0.14663033, 0.58365464, -0.5029707, 0.340553, 0.23084514, 0.26293015, 0.5551497, -0.7466942, 0.39640474, 0.8993509, 0.026155394, -0.10059515, 0.6803526, -0.25320202, -0.37228927, 

    -0.07585335, -0.4601519, -0.64549047, 0.78959143, 0.4162637, 0.69950813, 0.062145784, 0.21318918, 
    0.3653983, -1.3332326, 0.067367226, -0.6105841, 0.65898097, 0.23972578, -0.1201826, 0.52989113, 
    -1.3926804, 0.2533514, -0.9797143, 0.18325219, 0.60025376, 0.39403412, -0.5285327, 0.8663889, 
    -0.62200314, -0.34930703, 0.5823785, 0.6086883, -1.1894758, 0.031945065, 0.56831145, -0.2061252, 
    -0.7713876, 0.511819, 0.3708215, -0.24784528, -0.5799666, 0.12273684, -0.7259918, -0.6209896, 
    0.1333522, 0.28732952, 0.41790923, 0.09375996, 0.7306386, -0.83261544, -0.689759, 0.10046362, 
};

// -------------- Interface functions

void bootUp(unsigned int* layers, unsigned int numberOfLayers, byte* actvFunctions) {
    _layers = layers;
    _numberOfLayers = numberOfLayers;
    _actvFunctions = actvFunctions;

    Serial.println("Booting up...");

    SPIFFS.begin(true);
        
    int bsize = 0;
    int wsize = 0;
    for (unsigned int i = 1; i < numberOfLayers; i++) {
        bsize += layers[i];
    }
    for (unsigned int i = 1; i < numberOfLayers; i++) {
        wsize += layers[i] * layers[i - 1];
    }
    #ifdef USE_64_BIT_DOUBLE
    double initialBiases[bsize];
    double initialWeights[wsize];
    #else
    float initialBiases[bsize];
    float initialWeights[wsize];
    #endif
    
    for (int i = 0; i < bsize; i++) {
        initialBiases[i] = rand() % 1000000 / 1000000.0f;
    }
    for (int i = 0; i < wsize; i++) {
        initialWeights[i] = rand() % 1000000 / 1000000.0f;
    }

    currentModel = new NeuralNetwork(_layers, initialWeights, initialBiases, _numberOfLayers, _actvFunctions);
    trainModelFromOriginalDataset(*currentModel, X_TRAIN_PATH, Y_TRAIN_PATH);

    newModel = new NeuralNetwork(_layers, iinitialWeights, iinitialBiases, _numberOfLayers, _actvFunctions);
    trainModelFromOriginalDataset(*newModel, X_TRAIN_PATH, Y_TRAIN_PATH);
}

bool trainModelFromOriginalDataset(NeuralNetwork& NN, const String& x_file, const String& y_file) {
    Serial.println("Training model from original dataset...");
    File xFile = SPIFFS.open(x_file, "r");
    File yFile = SPIFFS.open(y_file, "r");

    if (!xFile || !yFile) {
        Serial.println("Error opening file");
        return false;
    }

    char str[1024];
    char *values;
    #if defined(USE_64_BIT_DOUBLE)
    double val;
    double x[_layers[0]], y[_layers[_numberOfLayers - 1]];
    #else
    float val;
    float x[_layers[0]], y[_layers[_numberOfLayers - 1]];
    #endif
    size_t bytes_read = 0;

    int tk = 0;

    Serial.println(" ========= Input model =========");
    NN.print();
    Serial.println(" ========= Input model end =========");

    for (int t = 0; t < EPOCHS; t++) {
        Serial.println("Epoch: " + String(t));
        tk = 0;
        // Read from file
        while (xFile.available() && yFile.available()) {
            Serial.print(" ====================== " + String(tk) + " ====================== ");

            int k = 0, j = 0;
            bytes_read = xFile.readBytesUntil('\n', str, 1023);
            if (bytes_read < 1) {
                break;
            }
            str[bytes_read] = '\0';

            Serial.println();
            Serial.print("str X: ");
            Serial.println(str);
    
            values = strtok(str, ",");
            while (values != NULL) {
                Serial.print(values);
                Serial.print(" ");
                #if defined(USE_64_BIT_DOUBLE)
                val = strtod(values, NULL);
                #else
                val = strtof(values, NULL);
                #endif
                x[j++] = val;
                Serial.print(" (");
                Serial.print(val);
                Serial.print(") ");
                Serial.print(" | ");
                values = strtok(NULL, ",");
            }
            
            bytes_read = yFile.readBytesUntil('\n', str, 1023);
            if (bytes_read < 1) {
                break;
            }
            str[bytes_read] = '\0';
            Serial.println();
            Serial.print("str Y: ");
            Serial.println(str);
    
            values = strtok(str, ",");
            while (values != NULL) {
                Serial.print(values);
                Serial.print(" ");
                #if defined(USE_64_BIT_DOUBLE)
                val = strtod(values, NULL);
                #else
                val = strtof(values, NULL);
                #endif
                y[k++] = val;
                Serial.print(" (");
                Serial.print(val);
                Serial.print(") ");
                Serial.print(" | ");
                values = strtok(NULL, ",");
            }

            Serial.println();            
            Serial.print("X: ");
            for (int i = 0; i < _layers[0]; i++) {
                Serial.print(x[i]);
                Serial.print(" ");
            }
            Serial.println();
            Serial.print("Y: ");
            for (int i = 0; i < _layers[_numberOfLayers - 1]; i++) {
                Serial.print(y[i]);
                Serial.print(" ");
            }
            Serial.println();

            // Train model
            NN.FeedForward(x);
            NN.BackProp(y);
            NN.getMeanSqrdError(1);
            
            NN.print();
            Serial.println(tk++);
            Serial.println('\n');
        }
        
        yFile.seek(0);
        xFile.seek(0);
    }
    
    xFile.close();
    yFile.close();
    return true;
}